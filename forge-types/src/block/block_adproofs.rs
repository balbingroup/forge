use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct BlockAdProofs {
    #[serde(rename = "headerId")]
    pub header_id: String,
    #[serde(rename = "proofBytes")]
    pub proof_bytes: String,
    pub digest: String,
    pub size: u64,
}

impl BlockAdProofs {
    pub fn new(header_id: String, proof_bytes: String, digest: String, size: u64) -> Self {
        Self {
            header_id,
            proof_bytes,
            digest,
            size,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_block_ad_proofs() {
        let json = r#"{
            "headerId": "b0244dfc267baca974a4caee06120321562784303a8a688976ae56170e4d175b",
            "proofBytes": "0200000000000000000000000000000000000000000000000000000000000000005527430474b673e4aafb08e0079c639de23e6a17e87edd00f78662b43c88aeda0000000002b69575e11c5c43400bfead5976ee0d6245a1168396b2e2a4f384691f275d501c0000012a80d6d0c7cfdad807100e040004c094400580809cde91e7b0010580acc7f03704be944004808948058080c7b7e4992c0580b4c4c32104fe884804c0fd4f0580bcc1960b04befd4f05000400ea03d192c1b2a5730000958fa373019a73029c73037e997304a305958fa373059a73069c73077e997308a305958fa373099c730a7e99730ba305730cd193c2a7c2b2a5730d00d50408000000010e6f98040483030808cd039bb5fe52359a64c99a60fd944fc5e388cbdc4d37ff091cc841c3ee79060b864708cd031fb52cf6e805f80d97cde289f4f757d49accf0c83fb864b27d2cf982c37f9a8b08cd0352ac2a471339b0d23b3d2c5ce0db0e81c969f77891b9edf0bda7fd39a78184e70000000000000000000000000000000000000000000000000000000000000000000002b8ce8cfe331e5eadfb0783bdc375c94413433f65e1e45857d71550d42e4d83bd0000011180bac28bc7e3f6a501101004020e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a7017300730110010204020404040004c0fd4f05808c82f5f6030580b8c9e5ae040580f882ad16040204c0944004c0f407040004000580f882ad16d19683030191a38cc7a7019683020193c2b2a57300007473017302830108cdeeac93a38cc7b2a573030001978302019683040193b1a5730493c2a7c2b2a573050093958fa3730673079973089c73097e9a730a9d99a3730b730c0599c1a7c1b2a5730d00938cc7b2a5730e0001a390c1a7730f000000000000000000000000000000000000000000000000000000000000000000000000031b3c7ef0d25f3c71bbc4b55d4dbafb1f5172a498f884c562cece96243282534d00000416",
            "digest": "766ab7a313cd2fb66d135b0be6662aa02dfa8e5b17342c05a04396268df0bfbb",
            "size": 786
        }"#;

        let block_ad_proofs: BlockAdProofs = serde_json::from_str(json).unwrap();
        let header_id = "b0244dfc267baca974a4caee06120321562784303a8a688976ae56170e4d175b";
        let proof_bytes = "0200000000000000000000000000000000000000000000000000000000000000005527430474b673e4aafb08e0079c639de23e6a17e87edd00f78662b43c88aeda0000000002b69575e11c5c43400bfead5976ee0d6245a1168396b2e2a4f384691f275d501c0000012a80d6d0c7cfdad807100e040004c094400580809cde91e7b0010580acc7f03704be944004808948058080c7b7e4992c0580b4c4c32104fe884804c0fd4f0580bcc1960b04befd4f05000400ea03d192c1b2a5730000958fa373019a73029c73037e997304a305958fa373059a73069c73077e997308a305958fa373099c730a7e99730ba305730cd193c2a7c2b2a5730d00d50408000000010e6f98040483030808cd039bb5fe52359a64c99a60fd944fc5e388cbdc4d37ff091cc841c3ee79060b864708cd031fb52cf6e805f80d97cde289f4f757d49accf0c83fb864b27d2cf982c37f9a8b08cd0352ac2a471339b0d23b3d2c5ce0db0e81c969f77891b9edf0bda7fd39a78184e70000000000000000000000000000000000000000000000000000000000000000000002b8ce8cfe331e5eadfb0783bdc375c94413433f65e1e45857d71550d42e4d83bd0000011180bac28bc7e3f6a501101004020e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a7017300730110010204020404040004c0fd4f05808c82f5f6030580b8c9e5ae040580f882ad16040204c0944004c0f407040004000580f882ad16d19683030191a38cc7a7019683020193c2b2a57300007473017302830108cdeeac93a38cc7b2a573030001978302019683040193b1a5730493c2a7c2b2a573050093958fa3730673079973089c73097e9a730a9d99a3730b730c0599c1a7c1b2a5730d00938cc7b2a5730e0001a390c1a7730f000000000000000000000000000000000000000000000000000000000000000000000000031b3c7ef0d25f3c71bbc4b55d4dbafb1f5172a498f884c562cece96243282534d00000416";
        let digest = "766ab7a313cd2fb66d135b0be6662aa02dfa8e5b17342c05a04396268df0bfbb";
        let size = 786;

        assert_eq!(block_ad_proofs.header_id, header_id);
        assert_eq!(block_ad_proofs.proof_bytes, proof_bytes);
        assert_eq!(block_ad_proofs.digest, digest);
        assert_eq!(block_ad_proofs.size, size);
    }
}